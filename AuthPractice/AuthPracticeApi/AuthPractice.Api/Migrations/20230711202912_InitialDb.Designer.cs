// <auto-generated />
using System;
using AuthPractice.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthPractice.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230711202912_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("AuthPractice.Api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IPhone13",
                            Price = 15000m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 2,
                            Name = "Macbook Air",
                            Price = 20000m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 3,
                            Name = "IPad Pro",
                            Price = 20000m,
                            Quantity = 150
                        });
                });

            modelBuilder.Entity("AuthPractice.Api.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleTitle = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            RoleTitle = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            RoleTitle = "User"
                        });
                });

            modelBuilder.Entity("AuthPractice.Api.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("AuthPractice.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@gmail.com",
                            Password = "john123",
                            RoleId = 1,
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jack.smith@gmail.com",
                            Password = "jack123",
                            RoleId = 2,
                            Username = "jacksmith"
                        },
                        new
                        {
                            Id = 3,
                            Email = "cany.call@gmail.com",
                            Password = "cany123",
                            RoleId = 3,
                            Username = "canycall"
                        });
                });

            modelBuilder.Entity("AuthPractice.Api.Entities.Token", b =>
                {
                    b.HasOne("AuthPractice.Api.Entities.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("AuthPractice.Api.Entities.Token", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthPractice.Api.Entities.User", b =>
                {
                    b.HasOne("AuthPractice.Api.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthPractice.Api.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthPractice.Api.Entities.User", b =>
                {
                    b.Navigation("Token")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
